
from flask import Flask
import telebot
from telebot import types
import csv
import os

app = Flask(__name__)

TOKEN = '8026901460:AAFUtnB52zXV4Gjxj-cW95EtM6hVunzhhgg' #'7905262846:AAF_7X8tsFmzfQIm_LPCR8u9Q3mIl53g5NY'
ADMIN_ID = 1508358992
RESULTS_FOLDER = 'survey_results'

os.makedirs(RESULTS_FOLDER, exist_ok=True)

bot = telebot.TeleBot(TOKEN)

QUESTIONS = [
    "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?",
    "–ö–∞–∫–æ–≤ –í–∞—à –ø–æ–ª?",
    "–ö –∫–∞–∫–æ–º—É —Å–ª–æ—é –æ–±—â–µ—Å—Ç–≤–∞ –ø–æ –¥–æ—Ö–æ–¥—É –í—ã —Å–µ–±—è –æ—Ç–Ω–æ—Å–∏—Ç–µ?",
    "–°–∫–æ–ª—å–∫–æ –í—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –≤ –º–µ—Å—è—Ü?",
    "–ò–º–µ–µ—Ç–µ –ª–∏ –í—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?",
    "–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
    "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –í–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –∂–∏–∑–Ω–∏ –≤ –º–µ—Å—è—Ü?",
    "–ö–∞–∫—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é –∫—É–ø—é—Ä—É –≤ —Ä—É–±–ª—è—Ö –í—ã –ø–æ–¥–Ω–∏–º–∏—Ç–µ —Å –∑–µ–º–ª–∏?",
    "–í—ã –Ω–∞—à–ª–∏ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å –≤–∏–∑–∏—Ç–∫–æ–π —Ö–æ–∑—è–∏–Ω–∞. –ö–∞–∫—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤—ã –Ω–µ –≤–µ—Ä–Ω–µ—Ç–µ?",
    "–ó–∞ —Å–∫–æ–ª—å–∫–æ –í—ã —É–±—å—ë—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞?",
    "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –í—ã –±—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å?",
    "–ü–æ—Å–ª–µ –∫–∞–∫–æ–π —Å—É–º–º—ã –¥–µ–Ω–µ–≥ –∏—Ö –ø—Ä–∏–±–∞–≤–æ–∫ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ?"
]

ANSWERS = {
    0: ["–û—Ç 15-18 –ª–µ—Ç", "–û—Ç 19-25 –ª–µ—Ç", "–û—Ç 25-45 –ª–µ—Ç", "–û—Ç 46 –∏ –±–æ–ª–µ–µ –ª–µ—Ç"],
    1: ["–ú—É–∂—Å–∫–æ–π –ø–æ–ª", "–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª"],
    2: ["–ö –±–µ–¥–Ω–æ–º—É —Å–ª–æ—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è",
        "–ö —Å—Ä–µ–¥–Ω–µ–º—É —Å–ª–æ—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è", "–ö –±–æ–≥–∞—Ç–æ–º—É —Å–ª–æ—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è", "–ö –æ—á–µ–Ω—å –±–æ–≥–∞—Ç–æ–º—É —Å–ª–æ—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è"],
    3: ["–ú–µ–Ω—å—à–µ 50.000 —Ä—É–±", "–û—Ç 50.000 –¥–æ 100.0000 —Ä—É–±",
        "–û—Ç 100.000 –¥–æ 250.000 —Ä—É–±", "–û—Ç 250.000 –¥–æ 500.000 —Ä—É–±", "–û—Ç 500.000 —Ä—É–±"],
    4: ["–î–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"],
    5: ["–î–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å!", "–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è"],
    6: ["40.000 —Ä—É–±–ª–µ–π", "60.000 —Ä—É–±–ª–µ–π", "100.000 —Ä—É–±–ª–µ–π", "150.000 —Ä—É–±–ª–µ–π", ">= 200.000 —Ä—É–±–ª–µ–π"],
    7: ["–ù–æ–º–∏–Ω–∞–ª–æ–º –≤ 50 —Ä—É–±–ª–µ–π", "–ù–æ–º–∏–Ω–∞–ª–æ–º –≤ 100 —Ä—É–±–ª–µ–π", "–ù–æ–º–∏–Ω–∞–ª–æ–º –≤ 1000 —Ä—É–±–ª–µ–π", "–ù–æ–º–∏–Ω–∞–ª–æ–º –≤ 5000 —Ä—É–±–ª–µ–π",
        "–ù–µ –ø–æ–¥–Ω–∏–º—É"],
    8: ["–Ø –≤–µ—Ä–Ω—É –≤—Å—ë, —á—Ç–æ –Ω–∞—à—ë–ª", "–Ø –Ω–µ –≤–µ—Ä–Ω—É 50 —Ä—É–±–ª–µ–π", "–Ø –Ω–µ –≤–µ—Ä–Ω—É 100 —Ä—É–±–ª–µ–π", "–Ø –Ω–µ –≤–µ—Ä–Ω—É 1000 —Ä—É–±–ª–µ–π",
        "–Ø –Ω–µ –≤–µ—Ä–Ω—É 5000 —Ä—É–±–ª–µ–π", "–Ø –Ω–µ –≤–µ—Ä–Ω—É –Ω–∏ –∫–æ–ø–µ–π–∫–∏!"],
    9: ["–ë–æ–ª–µ–µ 100.000 —Ä—É–±", "–ë–æ–ª–µ–µ 1.000.000 —Ä—É–±", "–ë–æ–ª–µ–µ 10.000.000 —Ä—É–±", "–ë–æ–ª–µ–µ 100.000.000 —Ä—É–±",
        "–ë–æ–ª–µ–µ 1.000.000.000 —Ä—É–±", "–Ø –Ω–∏ –∑–∞ —á—Ç–æ –Ω–µ —É–±—å—é —á–µ–ª–æ–≤–µ–∫–∞!"],
    10: ["–ó–∞ 500.000 —Ä—É–±–ª–µ–π", "–ó–∞ 1.000.000 —Ä—É–±–ª–µ–π", "–ó–∞ 5.000.0000 —Ä—É–±–ª–µ–π", "–ó–∞ 10.000.000 —Ä—É–±–ª–µ–π",
         "–ó–∞ >= 15.000.000 —Ä—É–±–ª–µ–π"],
    11: ["–û–∫–æ–ª–æ 1.000.000 —Ä—É–±", "–û–∫–æ–ª–æ 5.000.000 —Ä—É–±", "–û–∫–æ–ª–æ 10.000.000 —Ä—É–±", "–û–∫–æ–ª–æ 100.000.000 —Ä—É–±",
         "–û–∫–æ–ª–æ 1.000.000.000 —Ä—É–±", "–û–∫–æ–ª–æ 10.000.000.000 —Ä—É–±"]
}

users = {}

def clean_chat(chat_id, message_ids):
    for msg_id in message_ids:
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

def create_inline_keyboard(question_index):
    markup = types.InlineKeyboardMarkup()
    for answer in ANSWERS.get(question_index, []):
        callback_data = f"ans_{question_index}_{answer}"
        markup.add(types.InlineKeyboardButton(text=answer, callback_data=callback_data))
    return markup

def save_results(user_id):
    if user_id not in users or not users[user_id].get('responses'):
        return None

    try:
        final_responses = []
        for i in range(len(QUESTIONS)):
            answer = users[user_id]['responses'].get(i, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            clean_answer = str(answer).replace('\n', ' ').strip()
            final_responses.append(clean_answer)

        filename = os.path.join(RESULTS_FOLDER, f"user_{user_id}.csv")

        with open(filename, "w", newline="", encoding="cp1251") as csvfile:
            writer = csv.writer(csvfile, dialect='excel', delimiter=';')
            writer.writerow(final_responses)

        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return None

def show_question(user_id, chat_id, question_index):
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {question_index+1}:\n\n{QUESTIONS[question_index]}"
    markup = create_inline_keyboard(question_index)
    msg = bot.send_message(chat_id, question_text, reply_markup=markup)
    users[user_id].setdefault('message_ids', []).append(msg.message_id)

def create_question_selector(user_id):
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for i in range(len(QUESTIONS)):
        if i not in users.get(user_id, {}).get('answered', []):
            buttons.append(types.InlineKeyboardButton(text=f"–í–æ–ø—Ä–æ—Å {i+1}", callback_data=f"q_{i}"))
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    return markup

@bot.message_handler(commands=['start', 'help'])
def start_handler(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id in users and 'message_ids' in users[user_id]:
        clean_chat(chat_id, users[user_id]['message_ids'])
        users[user_id]['message_ids'] = []

    if user_id not in users:
        users[user_id] = {'answered': [], 'responses': {}, 'message_ids': []}
    else:
        users[user_id]['message_ids'] = []

    if len(users[user_id]['answered']) == len(QUESTIONS):
        msg = bot.send_message(chat_id, "üéâ –í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        users[user_id]['message_ids'].append(msg.message_id)
    else:
        msg = bot.send_message(
            chat_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–Ø –ø—Ä–æ–≤–æ–∂—É –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ–Ω–µ–≥.\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - —ç—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã.\n\n"
            "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=create_question_selector(user_id)
        )
        users[user_id]['message_ids'].append(msg.message_id)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if user_id in users and 'message_ids' in users[user_id]:
        clean_chat(chat_id, users[user_id]['message_ids'])
        users[user_id]['message_ids'] = []

    if user_id not in users:
        users[user_id] = {'answered': [], 'responses': {}, 'message_ids': []}

    if call.data.startswith('q_'):
        question_index = int(call.data.split('_')[1])
        show_question(user_id, chat_id, question_index)

    elif call.data.startswith('ans_'):
        _, q_index, answer = call.data.split('_', 2)
        q_index = int(q_index)

        users[user_id]['answered'].append(q_index)
        users[user_id]['responses'][q_index] = answer

        msg = bot.send_message(
            chat_id,
            f"‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å {q_index+1}:\n"
            f"¬´{QUESTIONS[q_index]}¬ª\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: {answer}"
        )
        users[user_id]['message_ids'].append(msg.message_id)

        if len(users[user_id]['answered']) == len(QUESTIONS):
            filename = save_results(user_id)

            msg = bot.send_message(
                chat_id,
                "üéâ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å!\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ."
            )
            users[user_id]['message_ids'].append(msg.message_id)

            if filename and os.path.exists(filename):
                try:
                    with open(filename, 'rb') as f:
                        bot.send_document(ADMIN_ID, f, caption=f"–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç user_{user_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            msg = bot.send_message(
                chat_id,
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
                reply_markup=create_question_selector(user_id)
            )
            users[user_id]['message_ids'].append(msg.message_id)

    bot.answer_callback_query(call.id)

'''
@app.route('/')
def launch():
    print("Working...")
    bot.infinity_polling()
'''

if __name__ == '__main__':
    app.run(debug = True, port = 8000)
